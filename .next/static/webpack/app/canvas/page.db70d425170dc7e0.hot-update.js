"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/canvas/page",{

/***/ "(app-pages-browser)/./components/canvas-2d.tsx":
/*!**********************************!*\
  !*** ./components/canvas-2d.tsx ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Canvas2D)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nfunction Canvas2D(param) {\n    let { width, height, backgroundColor, backgroundImage, furniture, selectedFurnitureId, onSelectFurniture, onMoveFurniture, onUpdateFurniture } = param;\n    _s();\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [isDragging, setIsDragging] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [dragStartX, setDragStartX] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [dragStartY, setDragStartY] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [draggedItemInitialX, setDraggedItemInitialX] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [draggedItemInitialY, setDraggedItemInitialY] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Load background image\n    const backgroundImageObj = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // State for image zoom and pan\n    const [imgZoom, setImgZoom] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [imgPan, setImgPan] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        x: 0,\n        y: 0\n    });\n    const [isPanning, setIsPanning] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [panStart, setPanStart] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        x: 0,\n        y: 0\n    });\n    const [imgPanStart, setImgPanStart] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        x: 0,\n        y: 0\n    });\n    // Touch support for pan and pinch-to-zoom\n    const lastTouchDist = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const lastTouchCenter = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Canvas2D.useEffect\": ()=>{\n            if (backgroundImage) {\n                const img = new Image();\n                img.src = backgroundImage;\n                img.onload = ({\n                    \"Canvas2D.useEffect\": ()=>{\n                        backgroundImageObj.current = img;\n                        drawCanvas();\n                    }\n                })[\"Canvas2D.useEffect\"];\n            } else {\n                backgroundImageObj.current = null;\n                drawCanvas();\n            }\n        }\n    }[\"Canvas2D.useEffect\"], [\n        backgroundImage\n    ]);\n    // Reset zoom/pan when image changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Canvas2D.useEffect\": ()=>{\n            setImgZoom(1);\n            setImgPan({\n                x: 0,\n                y: 0\n            });\n        }\n    }[\"Canvas2D.useEffect\"], [\n        backgroundImage\n    ]);\n    // Draw the canvas\n    const drawCanvas = ()=>{\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n        // Clear canvas\n        ctx.clearRect(0, 0, width, height);\n        // Draw background\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(0, 0, width, height);\n        // Draw background image if available\n        if (backgroundImageObj.current) {\n            const img = backgroundImageObj.current;\n            // Calculate scale to fit the entire image within the canvas (contain)\n            const imgRatio = img.width / img.height;\n            const canvasRatio = width / height;\n            let drawWidth, drawHeight;\n            if (imgRatio > canvasRatio) {\n                drawWidth = width;\n                drawHeight = width / imgRatio;\n            } else {\n                drawHeight = height;\n                drawWidth = height * imgRatio;\n            }\n            // Apply zoom\n            drawWidth *= imgZoom;\n            drawHeight *= imgZoom;\n            // Centered position with pan\n            const offsetX = (width - drawWidth) / 2 + imgPan.x;\n            const offsetY = (height - drawHeight) / 2 + imgPan.y;\n            ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);\n        }\n        // Sort furniture by zIndex\n        const sortedFurniture = [\n            ...furniture\n        ].sort((a, b)=>a.zIndex - b.zIndex);\n        // Draw furniture\n        sortedFurniture.forEach((item)=>{\n            ctx.save();\n            var _item_scale;\n            const scale = (_item_scale = item.scale) !== null && _item_scale !== void 0 ? _item_scale : 1;\n            ctx.translate(item.x + item.width * scale / 2, item.y + item.height * scale / 2);\n            ctx.rotate(item.rotation * Math.PI / 180);\n            ctx.scale(scale, scale);\n            // Draw custom shadow if enabled\n            if (item.shadowEnabled) {\n                ctx.save();\n                var _item_shadowRotation;\n                // Calculate shadow offset and length based on shadowRotation (light direction)\n                const angleRad = ((_item_shadowRotation = item.shadowRotation) !== null && _item_shadowRotation !== void 0 ? _item_shadowRotation : 0) * Math.PI / 180;\n                // Shadow offset: moves from front (positive Y) to back (negative Y)\n                const shadowOffsetY = Math.sin(angleRad) * (item.height * 0.18);\n                // Shadow length: longer when light is low (side), shorter when high (front/back)\n                const shadowLength = item.height * (0.10 + 0.18 * Math.abs(Math.cos(angleRad)));\n                var _item_shadowOpacity;\n                ctx.globalAlpha = (_item_shadowOpacity = item.shadowOpacity) !== null && _item_shadowOpacity !== void 0 ? _item_shadowOpacity : 0.3;\n                ctx.fillStyle = '#222';\n                ctx.beginPath();\n                ctx.ellipse(0, item.height * 0.45 + shadowOffsetY, item.width * 0.38, shadowLength, 0, 0, Math.PI * 2);\n                ctx.fill();\n                ctx.globalAlpha = 1;\n                ctx.restore();\n            }\n            // Draw realistic furniture by type\n            switch(item.type){\n                case \"sofa\":\n                    {\n                        // Realistic sofa: gradients, highlights, subtle shadow, plush look\n                        const sofaW = item.width;\n                        const sofaH = item.height;\n                        // --- SHADOW ---\n                        ctx.globalAlpha = 0.10;\n                        ctx.fillStyle = '#222';\n                        ctx.beginPath();\n                        ctx.ellipse(0, sofaH * 0.43, sofaW * 0.36, sofaH * 0.07, 0, 0, Math.PI * 2);\n                        ctx.fill();\n                        ctx.globalAlpha = 1;\n                        // --- BACK CUSHIONS ---\n                        const backCushionW = sofaW * 0.39;\n                        const backCushionH = sofaH * 0.32;\n                        const backCushionR = sofaH * 0.09;\n                        const backCushionY = -sofaH * 0.28;\n                        const backCushionGap = sofaW * 0.02;\n                        // Left back cushion gradient\n                        let grad = ctx.createLinearGradient(0, backCushionY, 0, backCushionY + backCushionH);\n                        grad.addColorStop(0, adjustColor(item.color, 30));\n                        grad.addColorStop(1, adjustColor(item.color, -10));\n                        ctx.fillStyle = grad;\n                        ctx.beginPath();\n                        ctx.moveTo(-backCushionW - backCushionGap / 2 + backCushionR, backCushionY);\n                        ctx.lineTo(-backCushionGap / 2 + backCushionW - backCushionR, backCushionY);\n                        ctx.quadraticCurveTo(-backCushionGap / 2 + backCushionW, backCushionY, -backCushionGap / 2 + backCushionW, backCushionY + backCushionR);\n                        ctx.lineTo(-backCushionGap / 2 + backCushionW, backCushionY + backCushionH - backCushionR);\n                        ctx.quadraticCurveTo(-backCushionGap / 2 + backCushionW, backCushionY + backCushionH, -backCushionGap / 2 + backCushionW - backCushionR, backCushionY + backCushionH);\n                        ctx.lineTo(-backCushionW - backCushionGap / 2 + backCushionR, backCushionY + backCushionH);\n                        ctx.quadraticCurveTo(-backCushionW - backCushionGap / 2, backCushionY + backCushionH, -backCushionW - backCushionGap / 2, backCushionY + backCushionH - backCushionR);\n                        ctx.lineTo(-backCushionW - backCushionGap / 2, backCushionY + backCushionR);\n                        ctx.quadraticCurveTo(-backCushionW - backCushionGap / 2, backCushionY, -backCushionW - backCushionGap / 2 + backCushionR, backCushionY);\n                        ctx.closePath();\n                        ctx.fill();\n                        // Left back cushion highlight\n                        ctx.globalAlpha = 0.18;\n                        ctx.fillStyle = '#fff';\n                        ctx.beginPath();\n                        ctx.ellipse(-sofaW * 0.19, backCushionY + backCushionH * 0.18, backCushionW * 0.32, backCushionH * 0.18, 0, Math.PI * 1.1, Math.PI * 1.9);\n                        ctx.fill();\n                        ctx.globalAlpha = 1;\n                        // Right back cushion gradient\n                        grad = ctx.createLinearGradient(0, backCushionY, 0, backCushionY + backCushionH);\n                        grad.addColorStop(0, adjustColor(item.color, 30));\n                        grad.addColorStop(1, adjustColor(item.color, -10));\n                        ctx.fillStyle = grad;\n                        ctx.beginPath();\n                        ctx.moveTo(backCushionGap / 2 + backCushionR, backCushionY);\n                        ctx.lineTo(backCushionGap / 2 + backCushionW - backCushionR, backCushionY);\n                        ctx.quadraticCurveTo(backCushionGap / 2 + backCushionW, backCushionY, backCushionGap / 2 + backCushionW, backCushionY + backCushionR);\n                        ctx.lineTo(backCushionGap / 2 + backCushionW, backCushionY + backCushionH - backCushionR);\n                        ctx.quadraticCurveTo(backCushionGap / 2 + backCushionW, backCushionY + backCushionH, backCushionGap / 2 + backCushionW - backCushionR, backCushionY + backCushionH);\n                        ctx.lineTo(backCushionGap / 2 + backCushionR, backCushionY + backCushionH);\n                        ctx.quadraticCurveTo(backCushionGap / 2, backCushionY + backCushionH, backCushionGap / 2, backCushionY + backCushionH - backCushionR);\n                        ctx.lineTo(backCushionGap / 2, backCushionY + backCushionR);\n                        ctx.quadraticCurveTo(backCushionGap / 2, backCushionY, backCushionGap / 2 + backCushionR, backCushionY);\n                        ctx.closePath();\n                        ctx.fill();\n                        // Right back cushion highlight\n                        ctx.globalAlpha = 0.18;\n                        ctx.fillStyle = '#fff';\n                        ctx.beginPath();\n                        ctx.ellipse(sofaW * 0.19, backCushionY + backCushionH * 0.18, backCushionW * 0.32, backCushionH * 0.18, 0, Math.PI * 1.1, Math.PI * 1.9);\n                        ctx.fill();\n                        ctx.globalAlpha = 1;\n                        // --- SEAT CUSHION ---\n                        const seatW = sofaW * 0.8;\n                        const seatH = sofaH * 0.19;\n                        const seatR = sofaH * 0.09;\n                        const seatY = 0;\n                        grad = ctx.createLinearGradient(0, seatY, 0, seatY + seatH);\n                        grad.addColorStop(0, adjustColor(item.color, 20));\n                        grad.addColorStop(1, adjustColor(item.color, -15));\n                        ctx.fillStyle = grad;\n                        ctx.beginPath();\n                        ctx.moveTo(-seatW / 2 + seatR, seatY);\n                        ctx.lineTo(seatW / 2 - seatR, seatY);\n                        ctx.quadraticCurveTo(seatW / 2, seatY, seatW / 2, seatY + seatR);\n                        ctx.lineTo(seatW / 2, seatY + seatH - seatR);\n                        ctx.quadraticCurveTo(seatW / 2, seatY + seatH, seatW / 2 - seatR, seatY + seatH);\n                        ctx.lineTo(-seatW / 2 + seatR, seatY + seatH);\n                        ctx.quadraticCurveTo(-seatW / 2, seatY + seatH, -seatW / 2, seatY + seatH - seatR);\n                        ctx.lineTo(-seatW / 2, seatY + seatR);\n                        ctx.quadraticCurveTo(-seatW / 2, seatY, -seatW / 2 + seatR, seatY);\n                        ctx.closePath();\n                        ctx.fill();\n                        // Seat highlight\n                        ctx.globalAlpha = 0.13;\n                        ctx.fillStyle = '#fff';\n                        ctx.beginPath();\n                        ctx.ellipse(0, seatY + seatH * 0.25, seatW * 0.38, seatH * 0.18, 0, Math.PI * 1.1, Math.PI * 1.9);\n                        ctx.fill();\n                        ctx.globalAlpha = 1;\n                        // --- ARMRESTS ---\n                        const armW = sofaW * 0.13, armH = sofaH * 0.32, armR = sofaH * 0.09;\n                        const armY = -sofaH * 0.02;\n                        grad = ctx.createLinearGradient(0, armY, 0, armY + armH);\n                        grad.addColorStop(0, adjustColor(item.color, 10));\n                        grad.addColorStop(1, adjustColor(item.color, -20));\n                        // Left armrest\n                        ctx.fillStyle = grad;\n                        ctx.beginPath();\n                        ctx.moveTo(-sofaW / 2 + armR, armY);\n                        ctx.lineTo(-sofaW / 2 + armW - armR, armY);\n                        ctx.quadraticCurveTo(-sofaW / 2 + armW, armY, -sofaW / 2 + armW, armY + armR);\n                        ctx.lineTo(-sofaW / 2 + armW, armY + armH - armR);\n                        ctx.quadraticCurveTo(-sofaW / 2 + armW, armY + armH, -sofaW / 2 + armW - armR, armY + armH);\n                        ctx.lineTo(-sofaW / 2 + armR, armY + armH);\n                        ctx.quadraticCurveTo(-sofaW / 2, armY + armH, -sofaW / 2, armY + armH - armR);\n                        ctx.lineTo(-sofaW / 2, armY + armR);\n                        ctx.quadraticCurveTo(-sofaW / 2, armY, -sofaW / 2 + armR, armY);\n                        ctx.closePath();\n                        ctx.fill();\n                        // Right armrest\n                        ctx.beginPath();\n                        ctx.moveTo(sofaW / 2 - armW + armR, armY);\n                        ctx.lineTo(sofaW / 2 - armR, armY);\n                        ctx.quadraticCurveTo(sofaW / 2, armY, sofaW / 2, armY + armR);\n                        ctx.lineTo(sofaW / 2, armY + armH - armR);\n                        ctx.quadraticCurveTo(sofaW / 2, armY + armH, sofaW / 2 - armR, armY + armH);\n                        ctx.lineTo(sofaW / 2 - armW + armR, armY + armH);\n                        ctx.quadraticCurveTo(sofaW / 2 - armW, armY + armH, sofaW / 2 - armW, armY + armH - armR);\n                        ctx.lineTo(sofaW / 2 - armW, armY + armR);\n                        ctx.quadraticCurveTo(sofaW / 2 - armW, armY, sofaW / 2 - armW + armR, armY);\n                        ctx.closePath();\n                        ctx.fill();\n                        // --- FEET ---\n                        const footW = sofaW * 0.045, footH = sofaH * 0.06, footR = footW / 2;\n                        const footY = sofaH * 0.36;\n                        ctx.fillStyle = adjustColor(item.color, -30);\n                        // Left foot\n                        ctx.beginPath();\n                        ctx.moveTo(-sofaW / 2 + armW / 2 - footW / 2 + footR, footY);\n                        ctx.lineTo(-sofaW / 2 + armW / 2 + footW / 2 - footR, footY);\n                        ctx.quadraticCurveTo(-sofaW / 2 + armW / 2 + footW / 2, footY, -sofaW / 2 + armW / 2 + footW / 2, footY + footR);\n                        ctx.lineTo(-sofaW / 2 + armW / 2 + footW / 2, footY + footH - footR);\n                        ctx.quadraticCurveTo(-sofaW / 2 + armW / 2 + footW / 2, footY + footH, -sofaW / 2 + armW / 2 + footW / 2 - footR, footY + footH);\n                        ctx.lineTo(-sofaW / 2 + armW / 2 - footW / 2 + footR, footY + footH);\n                        ctx.quadraticCurveTo(-sofaW / 2 + armW / 2 - footW / 2, footY + footH, -sofaW / 2 + armW / 2 - footW / 2, footY + footH - footR);\n                        ctx.lineTo(-sofaW / 2 + armW / 2 - footW / 2, footY + footR);\n                        ctx.quadraticCurveTo(-sofaW / 2 + armW / 2 - footW / 2, footY, -sofaW / 2 + armW / 2 - footW / 2 + footR, footY);\n                        ctx.closePath();\n                        ctx.fill();\n                        // Right foot\n                        ctx.beginPath();\n                        ctx.moveTo(sofaW / 2 - armW / 2 - footW / 2 + footR, footY);\n                        ctx.lineTo(sofaW / 2 - armW / 2 + footW / 2 - footR, footY);\n                        ctx.quadraticCurveTo(sofaW / 2 - armW / 2 + footW / 2, footY, sofaW / 2 - armW / 2 + footW / 2, footY + footR);\n                        ctx.lineTo(sofaW / 2 - armW / 2 + footW / 2, footY + footH - footR);\n                        ctx.quadraticCurveTo(sofaW / 2 - armW / 2 + footW / 2, footY + footH, sofaW / 2 - armW / 2 + footW / 2 - footR, footY + footH);\n                        ctx.lineTo(sofaW / 2 - armW / 2 - footW / 2 + footR, footY + footH);\n                        ctx.quadraticCurveTo(sofaW / 2 - armW / 2 - footW / 2, footY + footH, sofaW / 2 - armW / 2 - footW / 2, footY + footH - footR);\n                        ctx.lineTo(sofaW / 2 - armW / 2 - footW / 2, footY + footR);\n                        ctx.quadraticCurveTo(sofaW / 2 - armW / 2 - footW / 2, footY, sofaW / 2 - armW / 2 - footW / 2 + footR, footY);\n                        ctx.closePath();\n                        ctx.fill();\n                        // --- BASE BAR ---\n                        ctx.strokeStyle = adjustColor(item.color, -40);\n                        ctx.lineWidth = sofaH * 0.025;\n                        ctx.lineCap = \"round\";\n                        ctx.beginPath();\n                        ctx.moveTo(-sofaW * 0.19, footY + footH * 1.1);\n                        ctx.lineTo(sofaW * 0.19, footY + footH * 1.1);\n                        ctx.stroke();\n                        break;\n                    }\n                case \"table\":\n                    {\n                        // Table: tabletop, legs, shadow, highlight\n                        // Shadow\n                        ctx.globalAlpha = 0.15;\n                        ctx.fillStyle = \"#222\";\n                        ctx.beginPath();\n                        ctx.ellipse(0, item.height * 0.6, item.width * 0.45, item.height * 0.09, 0, 0, Math.PI * 2);\n                        ctx.fill();\n                        ctx.globalAlpha = 1;\n                        // Tabletop\n                        const tableTopGrad = ctx.createLinearGradient(-item.width / 2, -item.height * 0.1, item.width / 2, item.height * 0.1);\n                        tableTopGrad.addColorStop(0, adjustColor(item.color, 20));\n                        tableTopGrad.addColorStop(1, adjustColor(item.color, -10));\n                        ctx.fillStyle = tableTopGrad;\n                        ctx.fillRect(-item.width / 2, -item.height * 0.1, item.width, item.height * 0.18);\n                        // Highlight\n                        ctx.globalAlpha = 0.18;\n                        ctx.fillStyle = \"#fff\";\n                        ctx.fillRect(-item.width / 2, -item.height * 0.1, item.width, item.height * 0.04);\n                        ctx.globalAlpha = 1;\n                        // Legs\n                        ctx.fillStyle = adjustColor(item.color, -30);\n                        const legW = item.width * 0.08, legH = item.height * 0.5;\n                        ctx.fillRect(-item.width / 2 + legW * 0.2, item.height * 0.08, legW, legH);\n                        ctx.fillRect(item.width / 2 - legW * 1.2, item.height * 0.08, legW, legH);\n                        ctx.fillRect(-item.width / 2 + legW * 0.2, item.height * 0.08 + legH, legW, legH * 0.15);\n                        ctx.fillRect(item.width / 2 - legW * 1.2, item.height * 0.08 + legH, legW, legH * 0.15);\n                        break;\n                    }\n                case \"lamp\":\n                    {\n                        // Lamp: base, pole, shade, bulb, shadow\n                        // Shadow\n                        ctx.globalAlpha = 0.13;\n                        ctx.fillStyle = \"#222\";\n                        ctx.beginPath();\n                        ctx.ellipse(0, item.height * 0.48, item.width * 0.13, item.height * 0.05, 0, 0, Math.PI * 2);\n                        ctx.fill();\n                        ctx.globalAlpha = 1;\n                        // Base\n                        ctx.fillStyle = adjustColor(item.color, -40);\n                        ctx.beginPath();\n                        ctx.ellipse(0, item.height * 0.45, item.width * 0.15, item.height * 0.05, 0, 0, Math.PI * 2);\n                        ctx.fill();\n                        // Pole\n                        ctx.fillStyle = \"#888\";\n                        ctx.fillRect(-item.width * 0.02, 0, item.width * 0.04, item.height * 0.4);\n                        // Shade\n                        const lampShadeGrad = ctx.createLinearGradient(-item.width * 0.2, 0, item.width * 0.2, -item.height * 0.3);\n                        lampShadeGrad.addColorStop(0, adjustColor(item.color, 10));\n                        lampShadeGrad.addColorStop(1, adjustColor(item.color, -10));\n                        ctx.fillStyle = lampShadeGrad;\n                        ctx.beginPath();\n                        ctx.moveTo(-item.width * 0.2, 0);\n                        ctx.lineTo(item.width * 0.2, 0);\n                        ctx.lineTo(item.width * 0.12, -item.height * 0.3);\n                        ctx.lineTo(-item.width * 0.12, -item.height * 0.3);\n                        ctx.closePath();\n                        ctx.fill();\n                        // Bulb\n                        ctx.globalAlpha = 0.7;\n                        ctx.fillStyle = \"#fffbe6\";\n                        ctx.beginPath();\n                        ctx.arc(0, -item.height * 0.28, item.width * 0.04, 0, Math.PI * 2);\n                        ctx.fill();\n                        ctx.globalAlpha = 1;\n                        break;\n                    }\n                case \"chair\":\n                    {\n                        // Chair: seat, backrest, legs, shadow, highlight\n                        // Shadow\n                        ctx.globalAlpha = 0.15;\n                        ctx.fillStyle = \"#222\";\n                        ctx.beginPath();\n                        ctx.ellipse(0, item.height * 0.32, item.width * 0.22, item.height * 0.07, 0, 0, Math.PI * 2);\n                        ctx.fill();\n                        ctx.globalAlpha = 1;\n                        // Seat\n                        const seatGrad = ctx.createLinearGradient(-item.width * 0.25, 0, item.width * 0.25, item.height * 0.18);\n                        seatGrad.addColorStop(0, adjustColor(item.color, 10));\n                        seatGrad.addColorStop(1, adjustColor(item.color, -10));\n                        ctx.fillStyle = seatGrad;\n                        ctx.fillRect(-item.width * 0.25, 0, item.width * 0.5, item.height * 0.18);\n                        // Backrest\n                        const backGrad = ctx.createLinearGradient(-item.width * 0.25, -item.height * 0.4, item.width * 0.25, -item.height * 0.22);\n                        backGrad.addColorStop(0, adjustColor(item.color, 30));\n                        backGrad.addColorStop(1, adjustColor(item.color, 0));\n                        ctx.fillStyle = backGrad;\n                        ctx.fillRect(-item.width * 0.25, -item.height * 0.4, item.width * 0.5, item.height * 0.18);\n                        // Legs\n                        ctx.fillStyle = adjustColor(item.color, -30);\n                        const legWc = item.width * 0.07, legHc = item.height * 0.35;\n                        ctx.fillRect(-item.width * 0.22, item.height * 0.18, legWc, legHc);\n                        ctx.fillRect(item.width * 0.15, item.height * 0.18, legWc, legHc);\n                        // Highlight\n                        ctx.globalAlpha = 0.13;\n                        ctx.fillStyle = \"#fff\";\n                        ctx.fillRect(-item.width * 0.25, 0, item.width * 0.5, item.height * 0.04);\n                        ctx.globalAlpha = 1;\n                        break;\n                    }\n                default:\n                    ctx.fillStyle = item.color;\n                    ctx.fillRect(-item.width / 2, -item.height / 2, item.width, item.height);\n            }\n            if (item.id === selectedFurnitureId) {\n                ctx.strokeStyle = \"#2563eb\";\n                ctx.lineWidth = 2;\n                ctx.strokeRect(-item.width / 2 - 2, -item.height / 2 - 2, item.width + 4, item.height + 4);\n                ctx.fillStyle = \"#2563eb\";\n                ctx.beginPath();\n                ctx.arc(0, -item.height / 2 - 15, 5, 0, Math.PI * 2);\n                ctx.fill();\n            }\n            ctx.restore();\n        });\n    };\n    // Helper function to adjust color brightness\n    const adjustColor = (color, amount)=>{\n        // Convert hex to RGB\n        let r = Number.parseInt(color.substring(1, 3), 16);\n        let g = Number.parseInt(color.substring(3, 5), 16);\n        let b = Number.parseInt(color.substring(5, 7), 16);\n        // Adjust RGB values\n        r = Math.max(0, Math.min(255, r + amount));\n        g = Math.max(0, Math.min(255, g + amount));\n        b = Math.max(0, Math.min(255, b + amount));\n        // Convert back to hex\n        return \"#\".concat(r.toString(16).padStart(2, \"0\")).concat(g.toString(16).padStart(2, \"0\")).concat(b.toString(16).padStart(2, \"0\"));\n    };\n    // Handle mouse down\n    const handleMouseDown = (e)=>{\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const rect = canvas.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        // Check if clicked on a furniture item\n        const clickedItem = findClickedItem(x, y);\n        if (clickedItem) {\n            onSelectFurniture(clickedItem.id);\n            setIsDragging(true);\n            setDragStartX(x);\n            setDragStartY(y);\n            setDraggedItemInitialX(clickedItem.x);\n            setDraggedItemInitialY(clickedItem.y);\n            // Bring the clicked item to the front\n            const updatedFurniture = furniture.map((item)=>{\n                if (item.id === clickedItem.id) {\n                    return {\n                        ...item,\n                        zIndex: Math.max(...furniture.map((i)=>i.zIndex)) + 1\n                    };\n                }\n                return item;\n            });\n            // This will trigger a re-render with the updated zIndex\n            if (JSON.stringify(updatedFurniture) !== JSON.stringify(furniture)) {\n                // We need to update the parent component's state\n                // This is a bit of a hack since we don't have a direct way to update zIndex\n                const selectedItem = updatedFurniture.find((item)=>item.id === clickedItem.id);\n                if (selectedItem) {\n                    onMoveFurniture(selectedItem.id, selectedItem.x, selectedItem.y);\n                }\n            }\n        } else {\n            onSelectFurniture(null);\n        }\n    };\n    // Handle mouse move\n    const handleMouseMove = (e)=>{\n        var _furniture_find, _furniture_find1;\n        const canvas = canvasRef.current;\n        if (!canvas || !isDragging || !selectedFurnitureId) return;\n        const rect = canvas.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        const dx = x - dragStartX;\n        const dy = y - dragStartY;\n        const newX = Math.max(0, Math.min(width - (((_furniture_find = furniture.find((item)=>item.id === selectedFurnitureId)) === null || _furniture_find === void 0 ? void 0 : _furniture_find.width) || 0), draggedItemInitialX + dx));\n        const newY = Math.max(0, Math.min(height - (((_furniture_find1 = furniture.find((item)=>item.id === selectedFurnitureId)) === null || _furniture_find1 === void 0 ? void 0 : _furniture_find1.height) || 0), draggedItemInitialY + dy));\n        onMoveFurniture(selectedFurnitureId, newX, newY);\n    };\n    // Handle mouse up\n    const handleMouseUp = ()=>{\n        setIsDragging(false);\n    };\n    // Find clicked item\n    const findClickedItem = (x, y)=>{\n        // Check in reverse order (top to bottom in z-index)\n        for(let i = furniture.length - 1; i >= 0; i--){\n            const item = furniture[i];\n            // Simple bounding box check (doesn't account for rotation)\n            if (x >= item.x && x <= item.x + item.width && y >= item.y && y <= item.y + item.height) {\n                return item;\n            }\n        }\n        return null;\n    };\n    // Update canvas when props change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Canvas2D.useEffect\": ()=>{\n            drawCanvas();\n        }\n    }[\"Canvas2D.useEffect\"], [\n        width,\n        height,\n        backgroundColor,\n        furniture,\n        selectedFurnitureId\n    ]);\n    // Add touch event handlers to the canvas\n    const handleTouchStart = (e)=>{\n        if (e.touches.length === 1) {\n            const touch = e.touches[0];\n            const canvas = canvasRef.current;\n            if (!canvas) return;\n            const rect = canvas.getBoundingClientRect();\n            const x = touch.clientX - rect.left;\n            const y = touch.clientY - rect.top;\n            // Check if touched on a furniture item\n            const touchedItem = findClickedItem(x, y);\n            if (touchedItem) {\n                onSelectFurniture(touchedItem.id);\n                setIsDragging(true);\n                setDragStartX(x);\n                setDragStartY(y);\n                setDraggedItemInitialX(touchedItem.x);\n                setDraggedItemInitialY(touchedItem.y);\n                // Bring the touched item to the front\n                const updatedFurniture = furniture.map((item)=>{\n                    if (item.id === touchedItem.id) {\n                        return {\n                            ...item,\n                            zIndex: Math.max(...furniture.map((i)=>i.zIndex)) + 1\n                        };\n                    }\n                    return item;\n                });\n                // This will trigger a re-render with the updated zIndex\n                if (JSON.stringify(updatedFurniture) !== JSON.stringify(furniture)) {\n                    // We need to update the parent component's state\n                    // This is a bit of a hack since we don't have a direct way to update zIndex\n                    const selectedItem = updatedFurniture.find((item)=>item.id === touchedItem.id);\n                    if (selectedItem) {\n                        onMoveFurniture(selectedItem.id, selectedItem.x, selectedItem.y);\n                    }\n                }\n            } else {\n                onSelectFurniture(null);\n            }\n        }\n    };\n    const handleTouchMove = (e)=>{\n        if (e.touches.length === 1) {\n            var _furniture_find, _furniture_find1;\n            const touch = e.touches[0];\n            const canvas = canvasRef.current;\n            if (!canvas || !isDragging || !selectedFurnitureId) return;\n            const rect = canvas.getBoundingClientRect();\n            const x = touch.clientX - rect.left;\n            const y = touch.clientY - rect.top;\n            const dx = x - dragStartX;\n            const dy = y - dragStartY;\n            const newX = Math.max(0, Math.min(width - (((_furniture_find = furniture.find((item)=>item.id === selectedFurnitureId)) === null || _furniture_find === void 0 ? void 0 : _furniture_find.width) || 0), draggedItemInitialX + dx));\n            const newY = Math.max(0, Math.min(height - (((_furniture_find1 = furniture.find((item)=>item.id === selectedFurnitureId)) === null || _furniture_find1 === void 0 ? void 0 : _furniture_find1.height) || 0), draggedItemInitialY + dy));\n            onMoveFurniture(selectedFurnitureId, newX, newY);\n        }\n    };\n    const handleTouchEnd = ()=>{\n        setIsDragging(false);\n    };\n    // Mouse wheel for zoom\n    const handleWheel = (e)=>{\n        e.preventDefault();\n        let newZoom = imgZoom - e.deltaY * 0.001;\n        newZoom = Math.max(0.1, Math.min(5, newZoom));\n        setImgZoom(newZoom);\n    };\n    // Mouse down for pan\n    const handlePanStart = (e)=>{\n        setIsPanning(true);\n        setPanStart({\n            x: e.clientX,\n            y: e.clientY\n        });\n        setImgPanStart(imgPan);\n    };\n    // Mouse move for pan\n    const handlePanMove = (e)=>{\n        if (!isPanning) return;\n        const dx = e.clientX - panStart.x;\n        const dy = e.clientY - panStart.y;\n        setImgPan({\n            x: imgPanStart.x + dx,\n            y: imgPanStart.y + dy\n        });\n    };\n    // Mouse up to end pan\n    const handlePanEnd = ()=>{\n        setIsPanning(false);\n    };\n    // Touch support for pan and pinch-to-zoom\n    const handleTouchStartAdvanced = (e)=>{\n        if (e.touches.length === 1) {\n            // Single finger pan\n            setIsPanning(true);\n            setPanStart({\n                x: e.touches[0].clientX,\n                y: e.touches[0].clientY\n            });\n            setImgPanStart(imgPan);\n        } else if (e.touches.length === 2) {\n            // Pinch to zoom\n            setIsPanning(false);\n            const dx = e.touches[0].clientX - e.touches[1].clientX;\n            const dy = e.touches[0].clientY - e.touches[1].clientY;\n            lastTouchDist.current = Math.sqrt(dx * dx + dy * dy);\n            lastTouchCenter.current = {\n                x: (e.touches[0].clientX + e.touches[1].clientX) / 2,\n                y: (e.touches[0].clientY + e.touches[1].clientY) / 2\n            };\n        }\n    };\n    const handleTouchMoveAdvanced = (e)=>{\n        if (e.touches.length === 1 && isPanning) {\n            // Pan\n            const dx = e.touches[0].clientX - panStart.x;\n            const dy = e.touches[0].clientY - panStart.y;\n            setImgPan({\n                x: imgPanStart.x + dx,\n                y: imgPanStart.y + dy\n            });\n        } else if (e.touches.length === 2 && lastTouchDist.current !== null) {\n            // Pinch to zoom\n            const dx = e.touches[0].clientX - e.touches[1].clientX;\n            const dy = e.touches[0].clientY - e.touches[1].clientY;\n            const dist = Math.sqrt(dx * dx + dy * dy);\n            const scale = dist / lastTouchDist.current;\n            let newZoom = imgZoom * scale;\n            newZoom = Math.max(0.1, Math.min(5, newZoom));\n            setImgZoom(newZoom);\n            lastTouchDist.current = dist;\n        // Optionally, update pan to keep center fixed\n        }\n    };\n    const handleTouchEndAdvanced = (e)=>{\n        setIsPanning(false);\n        if (e.touches.length < 2) {\n            lastTouchDist.current = null;\n            lastTouchCenter.current = null;\n        }\n    };\n    // UI button handlers\n    const handleZoomIn = ()=>setImgZoom((z)=>Math.min(5, z * 1.1));\n    const handleZoomOut = ()=>setImgZoom((z)=>Math.max(0.1, z / 1.1));\n    const handleResetView = ()=>{\n        setImgZoom(1);\n        setImgPan({\n            x: 0,\n            y: 0\n        });\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"relative flex items-center justify-center p-4 bg-gray-100 min-h-[600px]\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n            id: \"furniture-canvas\",\n            ref: canvasRef,\n            width: width,\n            height: height,\n            className: \"border border-gray-300 shadow-md\",\n            onMouseDown: handleMouseDown,\n            onMouseMove: handleMouseMove,\n            onMouseUp: handleMouseUp,\n            onMouseLeave: handleMouseUp,\n            onTouchStart: handleTouchStart,\n            onTouchMove: handleTouchMove,\n            onTouchEnd: handleTouchEnd\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\ramik\\\\OneDrive\\\\Documents\\\\3rd Year\\\\HCI\\\\3d_furniture\\\\components\\\\canvas-2d.tsx\",\n            lineNumber: 727,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\ramik\\\\OneDrive\\\\Documents\\\\3rd Year\\\\HCI\\\\3d_furniture\\\\components\\\\canvas-2d.tsx\",\n        lineNumber: 726,\n        columnNumber: 5\n    }, this);\n}\n_s(Canvas2D, \"kM6IWBVPjkvRqS9aewZNZiHZn8I=\");\n_c = Canvas2D;\nvar _c;\n$RefreshReg$(_c, \"Canvas2D\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/canvas-2d.tsx\n"));

/***/ })

});